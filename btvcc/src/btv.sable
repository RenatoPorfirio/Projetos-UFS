Package btv;

Helpers 
 digito = ['0' .. '9'];
 letra_maiuscula = ['A'..'Z'];
 letra_minuscula = ['a'..'z'];
 letra = letra_maiuscula | letra_minuscula;
 espaco = ' ';
 rc = 13;
 nl = 10;
 tb = 11;
 ct = 9;
 conteudo_comentario_linha = [[0..0xffff] - nl];
 conteudo_comentario = [[0..0xffff] - [123 + 125]];
 
Tokens
 comentario_linha = '--' conteudo_comentario_linha* (rc | nl | rc nl);
 comentario_bloco = '{' conteudo_comentario* '}';
 abrir_comentario = '{';
 fechar_comentario = '}';
 se = 'se';
 condicional_entao = 'entao';
 condicional_senao = 'senao';
 dec_fam_passa = 'passa';
 dec_fam_por = 'por';
 soma = '+';
 menos = '-';
 mult = '*';
 div = '/';
 mod = '%';
 atribuicao = '=';
 igualdade = '==';
 menor = '<';
 menor_igual = '<=';
 ponto = '.';
 separador_arg = '|';
 e = 'e';
 ou = 'ou';
 neg = '!';
 entrada_programa = '>>';
 par_esq = '(';
 par_dir = ')';
 abrir_bloco = '[';
 fechar_bloco = ']';
 dec_molde = 'molde';
 molde_contem = 'contem';
 fim_dec_molde = 'fim';
 dec_const = 'constante:';
 dec_objeto = 'objeto:';
 dec_funcao = 'funcao:';
 fim_comando = ';';
 tipo_primitivo = 'Numero' | 'Bool' | 'Texto';
 bool = 'verdade' | 'falso';
 texto = '"' [[0..0xffff] - 34]* '"';
 delim_texto = '"';
 vazio = (espaco | rc | nl | tb | ct)+;
 id_molde = letra_maiuscula ('_' | letra)*;
 id = letra_minuscula ('_' | letra)*;
 numero = digito* ','? digito+ (('E' | 'e') ('+' | '-')? digito+)?;

Ignored Tokens
 vazio,
 comentario_linha,
 comentario_bloco;